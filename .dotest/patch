---
 app/controllers/users_controller.rb       |   24 +++++++++++++++-
 app/mailers/user/notifier.rb              |    4 ++-
 app/models/user.rb                        |   44 ++++++++++++++++++++--------
 app/models/user_session.rb                |    8 ++++-
 app/views/user/notifier/signup.text.erb   |    6 ++--
 app/views/users/recaptcha.html.haml       |   25 ++++++++++------
 config/locales/notifier.yml               |    3 ++
 config/locales/users_en.yml               |    5 ++-
 config/routes.rb                          |    1 +
 features/factories/user.rb                |    4 ++
 features/registration.feature             |   30 ++++++++++++-------
 features/step_definitions/registration.rb |    9 ++++++
 12 files changed, 123 insertions(+), 40 deletions(-)

diff --git a/app/controllers/users_controller.rb b/app/controllers/users_controller.rb
index ee4c6963116709f82a14c89f9e67dddcb644af7f..96bc500ea3139f49d206570a7612b99555112b27 100644
--- a/app/controllers/users_controller.rb
+++ b/app/controllers/users_controller.rb
@@ -10,7 +10,9 @@ class UsersController < ApplicationController
       @user = User.new(attributes)
       @user.email = attributes[:email]
       if verify_recaptcha(:private_key => Rails.application.config.xi_users.recaptcha.private_key, :model => @user) and @user.save
-        redirect_to user_profile_path
+        current_user_session.destroy if current_user_session
+        flash[:notice] = I18n.t("users.create.success")
+        redirect_to login_path
       else
         @validated_attributes = params[:validated_attributes]
         render :action => "recaptcha"
@@ -27,6 +29,24 @@ class UsersController < ApplicationController
     end
   end
 
+  def validate_account
+    if current_user
+      redirect_to user_profile_path 
+      return
+    end
+
+    @user = User.find_using_perishable_token(params[:id])
+    if @user
+      @user.validated_at = Time.now
+      @user.save!
+
+      flash[:notice] = I18n.t("users.validate_account.success")
+      redirect_to login_path
+    else
+      not_found
+    end
+  end
+
   only_logged :settings
   def settings
     @user = current_user
@@ -126,7 +146,9 @@ class UsersController < ApplicationController
   def home
     if current_user.nil?
       redirect_to login_path
+      return
     end
+
     @user = current_user
     render :template => "users/profile"
   end
diff --git a/app/mailers/user/notifier.rb b/app/mailers/user/notifier.rb
index f4d703acbf59e2cfa1b2f182ae68b27e4cd71637..909a64da2456d4b8d908deaac2a7cc0b6c8e25b3 100644
--- a/app/mailers/user/notifier.rb
+++ b/app/mailers/user/notifier.rb
@@ -7,7 +7,9 @@ class User::Notifier < ActionMailer::Base
     mail :to => change_email_request.new_email
   end
 
-  def signup
+  def signup(user)
+    @user = user
+    mail :to => @user.email
   end
 
   def forgot_password(reset_password_request)
diff --git a/app/models/user.rb b/app/models/user.rb
index e00b5ee884751407dec2d74989514843b58ea594..0f82d72e206566ab69adabef68d0640552120fca 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -1,7 +1,17 @@
 class User < ActiveRecord::Base
 
-  acts_as_authentic
+  acts_as_authentic do |config|
+    config.disable_perishable_token_maintenance = true
+  end
+
+  attr_accessible :name, :surname, :birth_date, :gender, :city, :postcode,
+                  :country, :hobbies, :gtalk, :skype, :website, :about,
+                  :password, :password_confirmation, :current_password, :terms_of_use
+
+  # Password modification logic
+  attr_accessor :current_password
 
+  validates :current_password, :valid_password => true
   validates :terms_of_use, :acceptance => true
 
   module Gender
@@ -15,6 +25,14 @@ class User < ActiveRecord::Base
     Company = "Company"
   end
 
+  after_create :send_signup_email
+  def send_signup_email
+    User::Notifier.signup(self).deliver
+  end
+
+  scope :admins, where(:role => Role::Admin)
+  scope :valid, where("validated_at IS NOT NULL")
+
   def admin?
     role == Role::Admin
   end
@@ -23,25 +41,25 @@ class User < ActiveRecord::Base
     role == Role::Company
   end
 
-  scope :admins, where(:role => Role::Admin)
-  scope :valid, where("validated_at IS NOT NULL")
-
-  attr_accessible :name, :surname, :birth_date, :gender, :city, :postcode,
-                  :country, :hobbies, :gtalk, :skype, :website, :about,
-                  :password, :password_confirmation, :current_password, :terms_of_use
-
-
-  # Password modification logic
-  attr_accessor :current_password
-  validates :current_password, :valid_password => true
-
   def complete_name
     [self.name, self.surname].join(" ")
   end
 
+  def validated?
+    !validated_at.nil?
+  end
+
   # TO DO
   def photo
     nil
   end
 
+  before_create :assign_perishable_token
+  def assign_perishable_token
+    if perishable_token.blank?
+      reset_perishable_token
+    end
+  end
+
+
 end
diff --git a/app/models/user_session.rb b/app/models/user_session.rb
index 0911757f2f9b2a4758746c3da2d1b046a550696e..7b9996eadd086ffbc1d43f995a32182167a04999 100644
--- a/app/models/user_session.rb
+++ b/app/models/user_session.rb
@@ -1,4 +1,10 @@
 class UserSession < Authlogic::Session::Base
   # http://rdoc.info/projects/binarylogic/authlogic
-end
 
+  before_validation :validated_users
+  def validated_users
+    if attempted_record and not attempted_record.validated?
+      errors.add_to_base "Invalid user"
+    end
+  end
+end
diff --git a/app/views/user/notifier/signup.text.erb b/app/views/user/notifier/signup.text.erb
index be60b855cf5dd89988a555c376bea2134b9725c9..7d96b747a1a27fc343fd15a28ecc84a23ec83a5c 100644
--- a/app/views/user/notifier/signup.text.erb
+++ b/app/views/user/notifier/signup.text.erb
@@ -1,3 +1,3 @@
-User::Notifier#signup
-
-<%= @greeting %>, find me in app/views/app/views/user/notifier/signup.text.erb
+<%= t "notifier.signup.body",
+    :web_name => Rails.application.config.community.web_name,
+    :validate => validate_account_path(@user.perishable_token) %>
diff --git a/app/views/users/recaptcha.html.haml b/app/views/users/recaptcha.html.haml
index 7841df3ae7be33caa1d81f49e3f86dfe4bb17158..518e323f57f32682c57abb17865dfd428525c0fd 100644
--- a/app/views/users/recaptcha.html.haml
+++ b/app/views/users/recaptcha.html.haml
@@ -1,22 +1,29 @@
-- content_for :page_title, t("recaptcha.title")
+- content_for :page_title, t("users.recaptcha.title")
 
 %h1
-  = t("recaptcha.title")
+  = t("users.recaptcha.title")
 
 - if flash[:recaptcha_error]
   .error
     = t flash[:recaptcha_error], :scope => "recaptcha.errors"
 
 = form_for :user, :html => {:id => "recaptcha_form"} do |form|
-  %fieldset
-    %legend 
+  %div.fieldset
+    %div.legend
       = t("recaptcha.form.title")
-    = raw recaptcha_tags(:public_key => Rails.application.config.xi_users.recaptcha.public_key)
-    = hidden_field_tag :validated_attributes, @validated_attributes
+    = label_tag :recaptcha_challenge_field
+    = t("recaptcha.form.help")
+    %script{:type => "text/javascript", :src => "http://api.recaptcha.net/challenge?k=#{Rails.application.config.xi_users.recaptcha.public_key}&error="}
+    %noscript
+      #recaptcha-no-js
+        %object{:title => t("recaptcha.form.field.title"), :data => "http://api.recaptcha.net/noscript?k=#{Rails.application.config.xi_users.recaptcha.private_key}", :type => "text/html"}
+          %textarea{:name => "recaptcha_challenge_field", :id => "recaptcha_challenge_field", :rows => "30", :cols=> "3", :value => "palabras"}
 
-    = buttons_bar do
-      = button_ok
-      = button_cancel(users_path)
+  = hidden_field_tag :validated_attributes, @validated_attributes
+
+  = buttons_bar do
+    = button_ok
+    = button_cancel(users_path)
 
 - content_for :secondary_bar do
   %div.box.signup-help
diff --git a/config/locales/notifier.yml b/config/locales/notifier.yml
index cfa81dcb601bf2efd4cff16adb8c3834387378bd..caccab0b63410bb3a18e7ad818f0892c678e2ddb 100644
--- a/config/locales/notifier.yml
+++ b/config/locales/notifier.yml
@@ -9,3 +9,6 @@ en:
       forgot_password:
         subject: Reset password confirmation
         body: "Someone (probably you) wants to reset the password of the account associated to this email in %{web_name}.\n\nIf you want to confirm the change, please visit %{validate}"
+      signup:
+        subject: Account validation
+        body: "Welcome to %{web_name}.\n\nThanks for coming to our community. You can activate your account in %{validate}."
diff --git a/config/locales/users_en.yml b/config/locales/users_en.yml
index edfa8c830b37261de616e21dfbafddb7c618f60b..4a0a31b7bdc41d5898251465eeb85ec8c2c63591 100644
--- a/config/locales/users_en.yml
+++ b/config/locales/users_en.yml
@@ -17,11 +17,12 @@ When su publish your content on this webspace, the user accepts the following cl
 - We will not accept any content which will go againt the following principles: honor rights, privacy, discrimination or any other personal or social circumstance. 
 - The user states and assures that:
 1. He/she is over 18 years old. 2. That his/her personal information is correct and it can be verified. 3. That he/she are the owners off all content published on thw web. 4. That in the case of uploading personal photos or videos, all have been produced with all participants consent and that all of them are over 18 years old. "
-
         registration_help:
           title: "Registration help"
           content1: "Please, fill in this form to begin with the registration. Once you have been registered we will send you an email in order to confirm your account and go on with the load process"
           content2: "All fields are required"
+    create:
+      success: "An email was sent to confirm your address."
 
     change_email:
       title: Email modification
@@ -67,6 +68,8 @@ When su publish your content on this webspace, the user accepts the following cl
       password_updated: "Your password has been updated."
       unknown_email: "The given email was not found."
 
+    validate_account:
+      success: "Your account is validated."
 
   activerecord:
     attributes:
diff --git a/config/routes.rb b/config/routes.rb
index 966e4bcd01e41ead8650917cdcbe1ea50a5d1ae4..fd05f187f7dae99b52a130c852c174cf88be947a 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -10,6 +10,7 @@ Rails.application.class.routes.draw do
   match 'account/reset_password/:id' => 'users#reset_password', :as => :reset_password
   match 'account/email' => 'users#email', :as => :account_email
   match 'validate/email/:id' => "users#validate_email", :as => "validate_email_change"
+  match 'validate/account/:id' => "users#validate_account", :as => "validate_account"
 
   resources :users
   resources :user_sessions
diff --git a/features/factories/user.rb b/features/factories/user.rb
index 867d936009c85a071f7c44e62a8ac4a9c3b7ef1f..2bf375c4baece3fc378ce67aca059168cfe2f4f5 100644
--- a/features/factories/user.rb
+++ b/features/factories/user.rb
@@ -23,6 +23,10 @@ Factory.define :user do |u|
     #u.web
 end
 
+Factory.define :invalidated_user, :parent => :user do |u|
+  u.validated_at nil
+end
+
 User.class_eval do
   def admin=(v)
     self.role = v ? User::Role::Admin : User::Role::Regular
diff --git a/features/registration.feature b/features/registration.feature
index e37d795555c19bc98e8d7e2a46f876bf5546a8d3..7efc43c01fbeba9627977694f6b63fc527a72304 100644
--- a/features/registration.feature
+++ b/features/registration.feature
@@ -29,7 +29,7 @@ Feature: Registration in the web
             | Name                      | Dude             |
             | Surname                   | Example          |
         And I submit the form
-        Then the form field "user acceptance" has an error
+        Then these fields have errors: user_terms_of_use 
 
     Scenario: Password has to be confirmed
         Given an anonymous session
@@ -41,7 +41,7 @@ Feature: Registration in the web
             | Name                      | Dude             |
             | Surname                   | Example          |
         And I submit the form
-        Then the form field "password confirmation" has an error
+        Then these fields have errors: Password 
 
     Scenario Outline: Email address has to be valid and unique
         Given an anonymous session
@@ -54,7 +54,7 @@ Feature: Registration in the web
             | Name                      | Dude             |
             | Surname                   | Example          |
         And I submit the form
-        Then the form field "email" has an error
+        Then these fields have errors: Email 
 
         Scenarios:
             | email             |
@@ -67,15 +67,23 @@ Feature: Registration in the web
 
     Scenario: When anonymous user registers, a confirmation email is sent
         Given an anonymous session
-        When I go to the signup page
+        When I go to the new user page
         And I fill in the following:
-            | email                 | dude@example.com |
-            | password              | foobar           |
-            | password confirmation | foobar           |
-            | name                  | Dude             |
-            | surname               | Example          |
-            | acceptance            | checked          |
+            | Email                 | dude@example.com |
+            | Password              | foobar           |
+            | Password confirmation | foobar           |
+            | Name                  | Dude             |
+            | Surname               | Example          |
+        And I check "I have read the terms and I accept them"
         And I submit the form
-        And I force the reCaptcha to be valid
+        Then I force the reCaptcha to be valid
         Then the flash box contains "An email was sent to confirm your address."
         And an email was sent with subject: "Account validation"
+
+    Scenario: When anonymous user confirms the signup, the user is actived
+      Given an anonymous session
+      And an invalidated user: "john" exists with email: "john@example.com", perishable_token: "12345"
+      When I go to the validate account page with id: "12345"
+      Then the user with email "john@example.com" is validated
+      And the flash box contains "Your account is validated."
+
diff --git a/features/step_definitions/registration.rb b/features/step_definitions/registration.rb
index 89fd092c860c4e3d903b43a8c75f27a7dfe24b65..c29d1a6141b1f5200c09b6ecb6fc58e4ec6628dd 100644
--- a/features/step_definitions/registration.rb
+++ b/features/step_definitions/registration.rb
@@ -2,3 +2,12 @@
 Then /^the password for "([^"]*)" is "([^"]*)"$/ do |user_email, user_password|
   User.find_by_email(user_email).valid_password?(user_password).should be_true
 end
+
+When /^I force the reCaptcha to be valid$/ do
+  # recaptcha gem skips the validations in test environment
+  And "I submit the form"
+end
+
+Then /^the user with email "([^"]+)" is validated$/ do |user_email|
+  User.find_by_email(user_email).validated?.should be_true
+end
-- 
1.5.6.5

